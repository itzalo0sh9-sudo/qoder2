version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - enterprise-network

  sales-api:
    build:
      context: ./backend/sales-api
      dockerfile: Dockerfile.prod
    image: qoder2-sales-api:latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - enterprise-network
    depends_on:
      - postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: qoder2-frontend:latest
    environment:
      - REACT_APP_SALES_API_URL=${REACT_APP_SALES_API_URL}
    networks:
      - enterprise-network
    ports:
      - "80:80"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - sales-api
    networks:
      - enterprise-network

volumes:
  postgres_data:

networks:
  enterprise-network:
    driver: bridge
version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  sales-api:
    image: qoder2-sales-api:latest
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8001:8000"
    depends_on:
      - postgres

volumes:
  postgres_data:
